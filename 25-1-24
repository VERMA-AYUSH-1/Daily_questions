1143. Longest Common Subsequence


class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        def lcs_bottom_up(s1, s2):
            m, n = len(s1), len(s2)

            # Create a table to store the lengths of LCS for subproblems
            dp = [[0] * (n + 1) for _ in range(m + 1)]

            # Build the table bottom-up
            for i in range(1, m + 1):
                for j in range(1, n + 1):
                    if s1[i - 1] == s2[j - 1]:
                        dp[i][j] = dp[i - 1][j - 1] + 1
                    else:
                        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

            # The length of LCS is stored in dp[m][n]
            return dp[m][n]
        result = lcs_bottom_up(text1, text2)
        return result



        
        # def lcs_memo(i, j, s1, s2, c, memo):
        #     if i >= len(s1) or j >= len(s2):
        #         return c

        #     if (i, j, c) in memo:
        #         return memo[(i, j, c)]

        #     if s1[i] == s2[j]:
        #         result = lcs_memo(i + 1, j + 1, s1, s2, c + 1, memo)
        #     else:
        #         result = max(
        #             lcs_memo(i + 1, j, s1, s2, c, memo),
        #             lcs_memo(i, j + 1, s1, s2, c, memo)
        #         )

        #     memo[(i, j, c)] = result
        #     return result
        # memo = {}
        # result = lcs_memo(0, 0, text1, text2, 0, memo)
        # return result



        # def lcs(i,j,s1,s2,c,count):
        #     if i>=len(s1) or j>=len(s2):
        #         count[0]=max(count[0],c)
        #         return
        #     elif s1[i]==s2[j]:
        #         lcs(i+1,j+1,s1,s2,c+1,count)
        #     else:
        #         lcs(i+1,j,s1,s2,c,count)
        #         lcs(i,j+1,s1,s2,c,count)

        # count=[0]
        # lcs(0,0,text1,text2,0,count)

        # return (count[0])
        
