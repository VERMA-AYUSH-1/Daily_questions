872. Leaf-Similar Trees
class Solution:
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        def dfs(root,ans):
            if root==None:
                return
            if root.left==None and root.right== None:
                ans.append(root.val)
            dfs(root.left,ans)
            dfs(root.right,ans)

        a=[]
        dfs(root1,a)
        b=[]
        dfs(root2,b)
        if a==b:
            return True
        return False


1448. Count Good Nodes in Binary Tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution: bfs solution
    def goodNodes(self, root: TreeNode) -> int:
        s=deque()
        s.append((root,-999999))
        c=0
        while len(s)!=0:
            # for i in range(len(s)):
            curr,maxx=s.popleft()
            if curr.val>=maxx:
                c+=1
            if curr.left:
                s.append((curr.left,max(curr.val,maxx)))
            if curr.right:
                s.append((curr.right,max(curr.val,maxx)))

        return c
                
# class Solution:   dfs solution
#     def goodNodes(self, root: TreeNode) -> int:
#         if not root:
#             return 0        
#         def dfs(node, curMax):
#             if not node:
#                 return
#             if node.val >= curMax:
#                 count[0] += 1
#                 curMax = node.val
#             dfs(node.left, curMax)
#             dfs(node.right, curMax)
        
#         count = [0]
#         dfs(root, root.val)
        
#         return count[0]
# class Solution:    my solution subsequence and no. of subsequence ke logic ko use kr kr
#     def goodNodes(self, root: TreeNode) -> int:
#         ans=[]
#         ans.append(root.val)
#         def fun(root,ans):
#             if root== None:
#                 return 0
#             ans.append(root.val)
#             l=fun(root.left,ans)
#             r=fun(root.right,ans)
#             ans.pop()
#             if  root.val>=max(ans):
#                 return l+r+1
#             return l+r
#         return fun(root,ans)
